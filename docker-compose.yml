version: '2'
services:
  traefik:
    image: traefik:v2.3
    command:
      - "--api=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.consulCatalog=true"
      - "--providers.consulCatalog.endpoint.address=consul:8500"
      - "--providers.consulCatalog.exposedByDefault=false"
      - "--providers.consulCatalog.stale=false"
      - "--providers.consulCatalog.prefix=traefik"
      - "--log.level=DEBUG"
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - backend
  consul:
    image: consul:1.8.0
    ports:
      - 8301:8301
      - 8302:8302
      - 8300:8300
      - 8500:8500
      - 8600:8600/udp
    command: consul agent -server -dev -client=0.0.0.0 -ui -bootstrap -log-level debug
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.consul.rule=Host(`consul.docker.localhost`)"
      - "traefik.http.services.consul.loadbalancer.server.port=8500"
    networks:
      - backend
  user-repository:
    image: markoniemi/user-repository
    environment:
      - CONSUL_HOST=${CONSUL_HOST}
      - CONSUL_PORT=${CONSUL_PORT}
      - DB_HOST=${DB_HOST}
      - DB_PASSWORD=${DB_PASSWORD}
    networks:
      - backend
  user-application:
    image: markoniemi/user-application
#    ports:
#      - 8083:8083
    networks:
      - backend
    environment:
      - CONSUL_HOST=${CONSUL_HOST}
      - CONSUL_PORT=${CONSUL_PORT}
      - PATH_PREFIX=${PATH_PREFIX}
  postgres:
    image: postgres:12-alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - 5432:5432
    networks:
      - backend
  portainer:
    image: portainer/portainer-ce:2.0.0-alpine
    command: -H unix:///var/run/docker.sock
    restart: always
    ports:
      - 9000:9000
      - 8000:8000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock            
networks:
  backend:
    driver: bridge
